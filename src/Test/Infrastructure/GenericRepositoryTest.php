<?php
/**
 * Example-laravel-Hexagonal has static methods for inflecting text.
 *
 * example DDD architecture
 * use of hexagonal programming
 *
 * Hexagonal Architecture that allows us to develop and test our application in isolation from the framework,
 * the database, third-party packages and all those elements that are around our application
 *
 * @link https://github.com/Desarrollo-zeros/example-laravel-Hexagonal
 * @since  1.0
 * @author dev zeros  <wowzeros2@gmail.com>
 * @name GenericRepositoryTest
 * @file /src/Test/Infrastructure/
 * @observations example GenericRepositoryTest domain entity
 *
 */

namespace Src\Test\Infrastructure;

use Illuminate\Database\Eloquent\Builder;
use Src\Domain\Abstracts\IUnitOfWork;
use Src\Domain\Base\BaseException;
use Src\Domain\Base\BuilderFactory;
use Src\Domain\Entity\UserEntity\UserEntity;
use Src\Infrastructure\Base\GenericRepository;
use Src\Infrastructure\Base\UnitOfWork;
use Src\Infrastructure\DBContext;
use Src\Test\Test;

class GenericRepositoryTest extends  Test
{
    /**
     * @var UserEntity
    */
    private $user;

    /**
     * @var DBContext
    */
    private $connection;

    /**
     * @var GenericRepository
    */
    private $repository;


    /**
     * @var IUnitOfWork
    */
    private $unitOfWork;
    /**
     * @var Builder
    */

    private $db;

    private $dbException = '{"Entity":"ORM","status":true,"message":"fails connect"}';

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        //init db
        $this->connection = new DBContext();
        $this->unitOfWork = new UnitOfWork($this->connection);
        $this->repository = new GenericRepository($this->connection,UserEntity::class);

        $this->user =  BuilderFactory::createUser("zeros","toor","wowzeros2@gmail.com",1);
    }


    /**
     * @test exits connexion
     * @connexion default table = "user"
    */
    public function is_connexion(){
        //test exist object connexion pdo
        $pdo = $this->connection->getConnection()->getPdo();

        $this->assertIsObject($pdo);
        if($pdo){
            $this->prontoPrint("test connexion ok ","success");
        }else{
            $this->prontoPrint("test connexion fail ","error");
        }

        $dbName1 = $this->connection->getConnection()->getDatabaseName();
        $dbName2 = env("DB_DATABASE");
        $this->assertEquals($dbName1,$dbName2);

        if($dbName1 == $dbName2){
            $this->prontoPrint("test database name ok ","success");
        }else{
            $this->prontoPrint("test database name fail ","error");
        }

        $this->assertEquals("user",$this->connection->getTable()); //table user
        $this->prontoPrint("test table name user ","success");


        $this->connection->setTable("test");
        $this->assertEquals($this->connection->getTable(),"test"); //change test
        $this->prontoPrint("test table change user to test ","success");
    }


    /**
     * @test add user in db test
     */
    public function addUserSuccess(){
        $entity = $this->repository->add($this->user);
        $this->unitOfWork->setEntity($entity); //opcional
        $this->assertEquals($this->unitOfWork->commit(),1);
        $this->prontoPrint("Save entity -> UserEntity","success");
    }

    /**
     * @test get user in db test
    */
    public function getUserSuccess(){
        $this->user = $this->repository->find(1);
        $this->assertEquals($this->user->entity->getUsername(),"zeros");
        $this->prontoPrint("find entity -> UserEntity","success");
    }

    /**
     * @test
    */
    public function getUserFinBySuccess(){
        $this->user = $this->repository->findBy(["id"=>"1"]);
        $this->assertEquals($this->user->firstObject()->getUsername(),"zeros");
        $this->prontoPrint("findBy entity -> UserEntity","success");
    }

    /**
     * @test
     *
    */
    public function getUserAllSuccess(){
        $this->user = $this->repository->getAll();
        $this->assertEquals($this->user->firstObject()->getUsername(),"zeros");
        $this->prontoPrint("getAll entity -> UserEntity","success");

    }

    /**
     * @test
     * @throws BaseException
     */

    public function multipleInsert(){
        $this->user = [
            BuilderFactory::Builder(
                UserEntity::class,
                BuilderFactory::createUser("zeros", "test", "b@tes.com")->toArray()
            )->toArray(),
            BuilderFactory::Builder(
                UserEntity::class,
                BuilderFactory::createUser("bxxx", "cxxx", "bxx@test.com")->toArray()
            )->toArray(),
        ];
        $this->assertTrue($this->repository->addRange($this->user));
        $this->assertEquals($this->unitOfWork->commit(),1);
        $this->prontoPrint("multiple insert entity -> UserEntity","success");
    }


    /**
     * @test
    */

    public function editSuccess(){
        $this->user = $this->repository->find(1);
        $this->user->entity->setPassword(sha1(rand(0,10)));
        $this->assertEquals($this->repository->edit($this->user->entity),1);
        $this->assertEquals($this->unitOfWork->commit(),1);
        $this->prontoPrint("edit entity -> UserEntity","success");
    }

    /**
     * @test
    */

    public function delSuccess(){
        $this->user = $this->repository->find(1);
        $this->assertEquals($this->repository->del($this->user->entity),1);
        //$this->assertEquals($this->unitOfWork->commit(),1); //no commit for test
        $this->prontoPrint("delete entity -> UserEntity","success");
    }

    /**
     * @test
    */
    public function deleteRangeSuccess(){

        $this->user = $this->repository->findBy(["username"=>"abc"]);
        $this->assertTrue($this->repository->deleteRange($this->user->entity));
        //$this->assertEquals($this->unitOfWork->commit(),1); //no commit for test
        $this->prontoPrint("delete entity -> UserEntity","success");

    }

}
