<?php
/**
 * Example-laravel-Hexagonal has static methods for inflecting text.
 *
 * example DDD architecture
 * use of hexagonal programming
 *
 * Hexagonal Architecture that allows us to develop and test our application in isolation from the framework,
 * the database, third-party packages and all those elements that are around our application
 *
 * @link https://github.com/Desarrollo-zeros/example-laravel-Hexagonal
 * @since  1.0
 * @author dev zeros  <wowzeros2@gmail.com>
 * @name Collection
 * @file /src/Infrastructure/Base/Collection
 * @observations example Collection domain entity
 *
 */


namespace Src\Infrastructure\Base;


use Illuminate\Support\Collection as CollectionFrameWork;
use Src\Infrastructure\Abstracts\ICollection;

class Collection  extends  CollectionFrameWork implements ICollection
{
    /**
     * Collection constructor.
     * @param array $data
     */
    public function __construct(array $data = [])
    {
        parent::__construct($data);
    }

    /**
     * Get all of the items in the collection.
     *
     * @return array
     */
    public function all() : array
    {
        return parent::all(); // TODO: Change the autogenerated stub
    }

    /**
     * Get the average value of a given key.
     *
     * @param callable|string|null $callback
     * @return mixed
     */
    public function avg($callback = null)
    {
        return parent::avg($callback); // TODO: Change the autogenerated stub
    }

    /**
     * Alias for the "avg" method.
     *
     * @param callable|string|null $callback
     * @return mixed
     */
    public function average($callback = null)
    {
        return parent::average($callback); // TODO: Change the autogenerated stub
    }

    /**
     * Get the median of a given key.
     *
     * @param string|array|null $key
     * @return mixed
     */
    public function median($key = null)
    {
        return parent::median($key); // TODO: Change the autogenerated stub
    }

    /**
     * Get the mode of a given key.
     *
     * @param string|array|null $key
     * @return array|null
     */
    public function mode($key = null)
    {
        return parent::mode($key); // TODO: Change the autogenerated stub
    }

    /**
     * Dump the collection and end the script.
     *
     * @param mixed ...$args
     * @return void
     */
    public function dd(...$args)
    {
        parent::dd($args); // TODO: Change the autogenerated stub
    }

    /**
     * Execute a callback over each item.
     *
     * @param callable $callback
     * @return CollectionFrameWork
     */
    public function each(callable $callback)
    {
        return parent::each($callback); // TODO: Change the autogenerated stub
    }

    /**
     * Run a filter over each of the items.
     *
     * @param callable|null $callback
     * @return CollectionFrameWork
     */
    public function filter(callable $callback = null)
    {
        return parent::filter($callback); // TODO: Change the autogenerated stub
    }

    /**
     * Filter items by the given key value pair.
     *
     * @param string $key
     * @param mixed $operator
     * @param mixed $value
     * @return CollectionFrameWork
     */
    public function where($key, $operator = null, $value = null)
    {
        return parent::where($key, $operator, $value); // TODO: Change the autogenerated stub
    }

    /**
     * Filter items by the given key value pair.
     *
     * @param string $key
     * @param mixed $values
     * @param bool $strict
     * @return CollectionFrameWork
     */
    public function whereIn($key, $values, $strict = false)
    {
        return parent::whereIn($key, $values, $strict); // TODO: Change the autogenerated stub
    }

    /**
     * Filter items such that the value of the given key is between the given values.
     *
     * @param string $key
     * @param array $values
     * @return CollectionFrameWork
     */
    public function whereBetween($key, $values)
    {
        return parent::whereBetween($key, $values); // TODO: Change the autogenerated stub
    }

    /**
     * Get the first item from the collection passing the given truth test.
     *
     * @param callable|null $callback
     * @param mixed $default
     * @return mixed
     */
    public function first(callable $callback = null, $default = null)
    {
        return parent::first($callback, $default); // TODO: Change the autogenerated stub
    }

    /**
     * Get an item from the collection by key.
     *
     * @param mixed $key
     * @param mixed $default
     * @return mixed
     */
    public function get($key, $default = null)
    {
        return parent::get($key, $default); // TODO: Change the autogenerated stub
    }

    /**
     * Group an associative array by a field or using a callback.
     *
     * @param array|callable|string $groupBy
     * @param bool $preserveKeys
     * @return CollectionFrameWork
     */
    public function groupBy($groupBy, $preserveKeys = false)
    {
        return parent::groupBy($groupBy, $preserveKeys); // TODO: Change the autogenerated stub
    }

    /**
     * Key an associative array by a field or using a callback.
     *
     * @param callable|string $keyBy
     * @return CollectionFrameWork
     */
    public function keyBy($keyBy)
    {
        return parent::keyBy($keyBy); // TODO: Change the autogenerated stub
    }

    /**
     * Join all items from the collection using a string. The final items can use a separate glue string.
     *
     * @param string $glue
     * @param string $finalGlue
     * @return string
     */
    public function join($glue, $finalGlue = '')
    {
        return parent::join($glue, $finalGlue); // TODO: Change the autogenerated stub
    }

    /**
     * Get the keys of the collection items.
     *
     * @return CollectionFrameWork
     */
    public function keys()
    {
        return parent::keys(); // TODO: Change the autogenerated stub
    }

    /**
     * Get the max value of a given key.
     *
     * @param callable|string|null $callback
     * @return mixed
     */
    public function max($callback = null)
    {
        return parent::max($callback); // TODO: Change the autogenerated stub
    }

    /**
     * Get the min value of a given key.
     *
     * @param callable|string|null $callback
     * @return mixed
     */
    public function min($callback = null)
    {
        return parent::min($callback); // TODO: Change the autogenerated stub
    }

    /**
     * Push an item onto the end of the collection.
     *
     * @param mixed $value
     * @return CollectionFrameWork
     */
    public function push($value)
    {
        return parent::push($value); // TODO: Change the autogenerated stub
    }

    /**
     * Search the collection for a given value and return the corresponding key if successful.
     *
     * @param mixed $value
     * @param bool $strict
     * @return mixed
     */
    public function search($value, $strict = false)
    {
        return parent::search($value, $strict); // TODO: Change the autogenerated stub
    }

    /**
     * Split a collection into a certain number of groups.
     *
     * @param int $numberOfGroups
     * @return CollectionFrameWork
     */
    public function split($numberOfGroups)
    {
        return parent::split($numberOfGroups); // TODO: Change the autogenerated stub
    }

    /**
     * Sort through each item with a callback.
     *
     * @param callable|null $callback
     * @return CollectionFrameWork
     */
    public function sort(callable $callback = null)
    {
        return parent::sort($callback); // TODO: Change the autogenerated stub
    }

    /**
     * Sort the collection using the given callback.
     *
     * @param callable|string $callback
     * @param int $options
     * @param bool $descending
     * @return CollectionFrameWork
     */
    public function sortBy($callback, $options = SORT_REGULAR, $descending = false)
    {
        return parent::sortBy($callback, $options, $descending); // TODO: Change the autogenerated stub
    }

    /**
     * Get the sum of the given values.
     *
     * @param callable|string|null $callback
     * @return mixed
     */
    public function sum($callback = null)
    {
        return parent::sum($callback); // TODO: Change the autogenerated stub
    }

    /**
     * Take the first or last {$limit} items.
     *
     * @param int $limit
     * @return CollectionFrameWork
     */
    public function take($limit)
    {
        return parent::take($limit); // TODO: Change the autogenerated stub
    }

    /**
     * Return only unique items from the collection array.
     *
     * @param string|callable|null $key
     * @param bool $strict
     * @return CollectionFrameWork
     */
    public function unique($key = null, $strict = false)
    {
        return parent::unique($key, $strict); // TODO: Change the autogenerated stub
    }

    /**
     * Reset the keys on the underlying array.
     *
     * @return CollectionFrameWork
     */
    public function values()
    {
        return parent::values(); // TODO: Change the autogenerated stub
    }

    /**
     * Get the collection of items as a plain array.
     *
     * @return array
     */
    public function toArray()
    {
        return parent::toArray(); // TODO: Change the autogenerated stub
    }

    /**
     * Convert the object into something JSON serializable.
     *
     * @return array
     */
    public function jsonSerialize()
    {
        return parent::jsonSerialize(); // TODO: Change the autogenerated stub
    }

    /**
     * Get the collection of items as JSON.
     *
     * @param int $options
     * @return string
     */
    public function toJson($options = 0)
    {
        return parent::toJson($options); // TODO: Change the autogenerated stub
    }

    /**
     * Count the number of items in the collection.
     *
     * @return int
     */
    public function count()
    {
        return parent::count(); // TODO: Change the autogenerated stub
    }

    /**
     * Count the number of items in the collection using a given truth test.
     *
     * @param callable|null $callback
     * @return CollectionFrameWork
     */
    public function countBy($callback = null)
    {
        return parent::countBy($callback); // TODO: Change the autogenerated stub
    }

    /**
     * Add an item to the collection.
     *
     * @param mixed $item
     * @return CollectionFrameWork
     */
    public function add($item)
    {
        return parent::add($item); // TODO: Change the autogenerated stub
    }

    /**
     * Convert the collection to its string representation.
     *
     * @return string
     */
    public function __toString()
    {
        return parent::__toString(); // TODO: Change the autogenerated stub
    }

    /**
     * Dynamically access collection proxies.
     *
     * @param string $key
     * @return mixed
     *
     * @throws \Exception
     */
    public function __get($key)
    {
        return parent::__get($key); // TODO: Change the autogenerated stub
    }


}
